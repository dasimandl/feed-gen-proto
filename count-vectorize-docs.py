import pandas as pd
import pickle
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, TfidfTransformer
from nltk.corpus import stopwords

with open('./utils/stopwords.txt') as f:
  additional_stopwords = f.read().splitlines()

def save_obj(obj, name ):
    with open('./pickle-files/' + name + '.pkl', 'wb') as f:
        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)

custom_stopwords = set(stopwords.words('english') + list(additional_stopwords))

articles = pd.read_pickle('./pickle-files/preprocessed_docs.pkl')

print('length of articles', len(articles))

df_articles = pd.DataFrame(articles)

# print(df_articles['full_text'][1])
# print(df_articles.dtypes)

docs = df_articles['full_text'].tolist()

cv=CountVectorizer(max_df=0.85,stop_words=stopwords.words('english'))
word_count_vector=cv.fit_transform(docs)

tfidf_transformer=TfidfTransformer(smooth_idf=True,use_idf=True)
tfidf_transformer.fit(word_count_vector)

save_obj(word_count_vector, 'word_count_vector')

print(list(cv.vocabulary_.keys())[:20])

test = "transcript episode introduction cryptocurrencies usable today case cryptocurrencies today store value like people gold speculation reason case cryptocurrencies narrow problem scalability cryptocurrencies scalability bottleneck okay think internet consumer home dialup modem bottleneck bandwidth home broad network physical network connection home internet company server bandwidth today server company slow expensive internet scalability problem incrementally solve solution scalability problem emerge iterative frothy process sudden airplane watch youtube videos smartphone watch youtube videos smartphone sound unbelievable like penny across internet unbelievable today penny across world today dollar worth transaction cost absurd multipage email video across world free penny value across world free someday able cryptocurrency penny continent halfway world transaction fraction penny removal financial friction transaction cost change global economics certainly value transfer ability penny continent achieve centralized system cryptocurrencies advantage cryptocurrency model potential completely uncensorable truly free market economics global stage maybe occur bitcoin maybe occur ethereum major technological breakthrough people interested cryptocurrencies software engineering daily transcript look like able build kind stand modern cryptocurrencies beautiful future world micropayments large scalability problem similar scalability problem consumer internet today show focus issue scalability block propagation time cryptocurrency transaction verify miner bitcoin blockchain transaction verify roughly minute transaction represent block blockchain miner solve cryptographic puzzle associate transaction block receive payment form block reward transaction associate transaction issue transaction bitcoin network transaction sits mempool list pending transaction confirm mining process miner world simultaneously compete find solution pending transaction mempool miner include transaction block miner discover solution block transaction accept blockchain reason transaction guarantee accept time period know block propagation time block propagation time time take confirmed block transaction blockchain network accept miner switch mine block transaction block solve nearly time miner winner current block reward miner block manage propagate network fast unfortunate race condition bloxroute company develop blockchain distribution network like push medium file edge fast access content delivery network push miner network course mean potentially centralize infrastructure order effectively decentralize trustworthy bloxroute claim provably trustable software engineering daily transcript network protocol token base incentive system keep goal align large blockchain world aleksandar kuzmanovic founder bloxroute founder professor computer science northwestern university cofounder bloxroute include guest show emin sirer soumya basu bloxroute founder strong theoretical background great reputation cryptocurrency community vast majority founder issue token reason episode interesting people reputation cryptocurrency community token funding incentive model potentially risky blow hear previous episode founder company issue token give explanation protocol need token token great idea apply mechanism rich quickly idea besmirch rich quick techno scam artists bloxroute credible explanation token pointed question aleksandar today episode project legitimacy reasoning sense enjoy episode think example positive potential tokenization hope enjoy well sponsor message data hold incredible amount value extract value data difficult especially nontechnical nonanalyst user software builder unique opportunity unlock value data user product service jaspersoft offer embeddable report dashboard data visualization developer love give user intuitive access data ideal place take action application check jaspersoft softwareengineeringdaily jaspersoft find easy embed reporting analytics application jaspersoft great admin software engineering daily transcript dashboard help customer data drive decision product company analytics customer analytics jaspersoft tibco software company decade experience analytics event processing recent episode software engineering daily discuss past present future tibco well development jaspersoft meantime check jaspersoft softwareengineeringdaily jaspersoft thanks jaspersoft sponsor software engineering daily interview aleks kuzmanovic founder bloxroute welcome software engineering daily thank great soumya cofounder show emin sirer team show team highly technical expertise blockchain technology work scalability issue hear blockchains scale bitcoin scale talk bitcoin specifically bitcoin scalability issue well mean start answer philosophically first answer like news bitcoin truly decentralized system mean hear like single entity control system cool price basically well system lack scalability mean reality bitcoin currently transaction second close need case widely grit real problem trustless peer peer network sits node bitcoin connect software engineering daily transcript basically node check flow network sure receive valid propagate node take time create problem scalable blockchains scalable bitcoin example able well initially bitcoin design disrupt financial system like visa mastercard look number example visa inaudible transaction second consider number assume fill tank week need transaction blockchains design goal mind okay example micropayments talk consider scenario example create viral video video download million user overnight assume user video capable give cent cent watch video account nicer create viral video like today autonomous artificial intelligence significant impact well artificial self driving sure autonomous wiggle autonomous system actually believe machine payment human base payment story think blockchains immense right think drill moment acrimony engineering space expect engineer understand cryptocurrencies micropayments software engineering daily transcript massive innovation antagonism cryptocurrency space like killer stuff tulip bulbs kind like internet deal share videos order grocery online kind technical bottleneck solve like attrition like release facebook viral like maybe current crop people internet entrepreneur investor people comment stuff grow facebook google idea successful piece technology build year year viral take continue meteoric rise technology work right basically give analogy professor computer science northwestern know history internet tell example people design internet today block basically circuit switch telephone network right people come idea like know bucket route internet work fine kill believe people think last year give chance actually show work eventually work happy feel cryptocurrencies personally work interesting career power smart contract distribute application fell believer stand discussion issue transaction bitcoin network today penny penny video host online support video maybe bitcion uncentrable payment network video politically sensitive take person post support bitcoin payment censor penny bitcoin network today penny expensive software engineering daily transcript well mean true tell cryptocurrencies reason need scale right kill back question point remember like june last year transaction bitcoin network high transaction right case penny well sense bring significantly transaction small amount person work fine high basically work entity call miner entity actually produce block bitcoin dive detail hope people show basic bitcoin maybe refresh expense block consist transaction block mine minute give number example okay assume transaction transaction create minute okay mean miner choose transaction block miner rational people know sort transaction high first money come okay example tiny tiny large transaction include single block wait block block case comparative software engineering daily transcript eventually increase transaction include block transaction system capacity system support naturally price bitcoin cryptocurrencies payment pending issue cent payment cent transaction mempool candidate accept block miner accept candidate transaction transaction high associate person like miner accept transaction block precisely course blame miner rational player transaction alex jeff give cent well pick alex give right pure economic system necessarily capacity serve transaction well potential scalability solution like articulate term call block propagation time block propagation time okay basically block propagation time time take block propagate majority network network typically scenario talk bitcoin blockchain purpose basically happen assume megabyte block create miner block network peer peer network node keep propagate miner node network check like okay okay take time block propagate network okay software engineering daily transcript currently take mean statistic show take second megabyte block propagate miner rest rest network node network parameter important node page hard reach consensus blockchain transaction consider mine system miner compete solve problem associate transaction miner solve problem miner broadcast solution miner claim reward move mine next block blockchain multicasting block propagation time faster affect transaction capacity bitcoin blockchain well mean extreme case assume infinite capacity mean theoretical term assume second assume delay promptly longer distributed system single bunch node communicate assume rack server next spread world case give huge capacity flow promptly node page view network follow blockchain rule easy come consensus lower block propagation time miner compete anymore conflict view world increase transaction throughput definitely increase transaction throughput actually startup actually build network significantly reduce propagation induce peer peer network actually create large actually create scalable blockchains right understand block propagation time first block time right minute block time difficulty network solution block discover roughly minute average block time gate factor long window time find solution solution software engineering daily transcript discover block propagation time additional latency length time spend block propagation time period latency bloxroute compare block time like span time mean parameter basically first parameter talk interblock time time scale block arrive okay block propagation time time need block propagate entire network okay small block propagation time possible actually reduce interblock time okay basically increase throughput blockchain frequent block generate transaction approve system move transaction second competition minute period guess pull effort shrink absolute time take block time measure difficulty kind measure long actually take right basically increase throughput blockchain increase block size push push transaction system decrease interblock time right increase block size decrease interblock time basically give constrain underlying network okay example currently bitcoin block megabyte take second second propagate network increase block size take second propagate network perfect still minute nice still work okay decide increase block size push megabyte block still exist peer peer network happen software engineering daily transcript block propagation time second long minute interblock time nightmare kind scenario blockchain mean come consensus block full create people blockchain unravel scenario right block time decide block time network mean inter block time inter block time inter block time parameter blockchain example bitcoin average minute base difficulty inaudible puzzle need solve hand example ethereum small second issue ethereum block small okay interplay small block come frequently long block come frequently effect bitcoin transaction second ethereum transaction second right mean fundamental limit move example forget megabyte block millisecond mean underlying network propagation huge complete collapse system interblock time blockchain change change basically parameter blockchain decide designer blockchain kind change parameter example software engineering daily transcript voting base cache power blockchain system example third participant player stakeholder blockchain decide change parameter change happen rarely typically easy people fork blockchain example bitcoin cash fork bitcoin happen point decide change parameter independent blockchain independent fork kind change parameter blockchain okay block propagation time level like latency like block propagation time small suggest blockchains interblock time long interblock time long block propagation time able prevent blockchain unravel correct exactly case approach actually wide area experiment actually come case listen change parameter safely increase significantly block size trick explain road increase block size decrease interblock time still work block propagation time still small interblock time need worry blockchain space hypothetically successfully bitcoin least bitcoin current form governance change right think able convince people interblock time yeah yeah basically system completely agnostic work blockchain okay cryptocurrencies large number blockchains mean think enablers blockchain community software engineering daily transcript bitcoin community listen like work care mean leave decision individual blockchain community open imagine bitcoin like approach think example bitcoin cash increase block size like guess like give enable happen time individual blockchain community realize kind decide blockchain bitcoin like care scalability bitcoin hold value like gold need transaction choice luck mean blockchains need scalability scalability give mission sponsor message kubernetes difficult container networking storage disaster recovery issue figure alone mesosphere kubernetesas service single click kubernetes deployment simple management security feature high availability kubernetes deployment easy find mesosphere kubernetes service softwareengineeringdaily mesosphere mesosphere kubernetes service heals detect problem state cluster worry cluster easy install monitoring logging tool kubernetes cluster click install additional tooling like prometheus linkerd jenkins service service catalog mesosphere build multi cloud hybrid cloud edge compute easy software engineering daily transcript find mesosphere kubernetes service help easily deploy kubernetes check softwareengineeringdaily mesosphere support software engineering daily well reason mesosphere founder hindman first people interview software engineering back host software engineering radio generous explanation distribute system concept back year applied distributed system material little scant marketplace hard find distribute system production people evangelize talk obviously build apache mesos happy mesosphere sponsor check mesosphere support software engineering daily softwareengineeringdaily mesosphere interview continue start scalability solution deep bloxroute talk bloxroute lower block propagation time nice kind chain scalability solution chain kind fuzzy term talk lightning network chain scale solution second layer solution understanding light network publish transaction directly blockchain publish transaction lightning network node lightning network aggregate collection transaction publish aggregation transaction chain layer compression transaction need accept chain order micropayments example maybe differ definition light network tell tell critique lightning network yeah think fantastic joke definitely talk basically example assume starbucks software engineering daily transcript tell aleks borrow borrow lightning network mean borrow basically idea lightning network like rest world blockchain node china care aleks lend jeff need chain okay work like example agreement depot account deposit account okay payment channel okay money give give back give give back transact actually tell lock payment channel okay basically idea case application mean political case work chain transaction chain kind system totally fine problem issue example assume apply idea computer apple example assume deposit apple keep apple item minute deposit perfectly fine chain transaction time question deposit apple sound like idea transact still still need chain transaction lightning network solve problem direction listen deposit entity entity money deposit apple directly apple intermediary player idea transaction happen instantly time still need chain transaction fundamentally case software engineering daily transcript bloxroute completely compatible chain solution scale thousand time chain scale time chain total scale million time problem happy share kind fame jointly light network problem relay network subject censorship right basically relay network chain chain solution basically chain solution relay network falcon fiber basically intermediary network basically help close transaction right chain case basically help propagate block lightning network example intermediate player decide help close transaction reason listen fail problem leave problem lightning network designer kind solve okay well scale centralized system method scale place load balancer cdns sharding caching useful winner take mode scalability least prove useful people work scalability issue nice know work talk like sharding proof stake like hashgraph hear kind solution think worth show least ethereum side think interested unproven winner take scalability solution like bloxroute blockchain distribution network mean basically akamai blockchains mean like akamai familiar content distribution network help push data access work fast knowledgeable example youtube youtube like help download video quickly nearby server software engineering daily transcript basic idea stand bloxroute call blockchain distribution network content distribution network blockchain distribution network come title think basically network consist server relay propagate behalf blockchains transaction block piece gateway software typically next blockchain node bitcoin ethereum node matter basically help interface difference blockchains network course idea minimize block propagation time talk blockchains safely reduce interblock time increase block size goal improve scalability system transaction propagate bitcoin network example bloxroute difference transaction network case blockchain distribution network case distribution network right basically bitcoin network example bitcoin jeff sign private transaction typically bytes long bitcoin network blockchain node blockchain node look transaction transaction keep peer member network node receive transaction look look transaction keep propagate transaction peer peer network typically transaction reach node eventually point miner include transaction block block take time block propagate work current system software engineering daily transcript bloxroute happen follow transaction transaction blockchain node assume blockchain node gateway software direct access bloxroute network happen transaction peer slow step swiftly distribute swiftly entire blockchain blockchain node timescale hundred millisecond transaction okay transaction typically mean size average size byte network index transaction example transaction example bytes long explain matter okay transaction reach blockchain node point like happen today bitcoin miner mine block transaction block block come gateway software okay gateway software look block listen transaction okay roadblock currently megabyte small chunk data maybe kilobyte byte long transaction byte long transaction okay first level compression happen block come gateway okay gateway block swiftly node network okay basically mean call rout novel switch networking switch decade basically kilobyte block come relay relay check simply propagate byte arrive node achieve swift propagation block compress data swiftly capable efficiently currently bitcoin blockchains software engineering daily transcript yeah think understand node select transaction candidate block mempool work solve block contain candidate transaction miner work transaction select transaction mempool accept network waste time bloxroute node aware faster rout think people still clearly bloxroute transaction broadcast transaction network huge help miner aware happen network pretty quickly time block receive quickly mining similar help time block wire lock reach network quickly probability miner increase probability mining round bottom line forget scale mean scale goal course reach blockchain sure able scaling happen useful service miner user blockchain network node network access blockchain distribution network gateway node mining node example purpose gateway purpose gateway twofold first like interface network right blockchain network blockchain node basically gateway look like node blockchain network okay interfacing help like blockchain node gateway speak blockchain protocol kind stay compatible exist blockchains gateway speak language protocol relay software engineering daily transcript interface blockchain system system actually feature gateway important feature gateway data compression uncompression basically accept roadblock create small block swiftly propagate small compress block reach outgo gateway gateway data decompression move back original transaction data block come swiftly quickly blockchain node basically service important gateway bump issue talk lightning network earlier centralization exchange high throughput trust bloxroute distribution network overcome centralization risk network invention bloxroute right tussle like completely decentralize system basically build idea decentralization centralized blockchain distribution network work mean kill nature blockchains basically invention blunt example assume bitcoin network come ethereum network come bloxroute soon assume start serve block transaction assume example come know authority authority country tell understand blockchains figure bitcoin address example know sure involve like drug trafficking time transaction address forward address back tell take care understand software engineering daily transcript answer come like bloxroute answer like like happen blockchain network absolutely help simply network design incapable block come network transaction block block bloxroute encrypt completely encrypt inside dive transaction propagate block work gateway encrypt block block center network control control gateway come relay encrypted block know inside completely distribute block gateway blockchain node release sending node help decrypt block figure transaction happen okay help hand performance centralized system time keep centralized system completely incapable censor network example example listen server country come authority reason point happen entire network operate idea interact relay mean example node china mine block gateway software compress data compress data gateway london london node encrypts block network network idea know create block come mine china mine europe basically design create idea create blockchains ability sensor chase centralized bank basically like transaction software engineering daily transcript cool operate like centralized network threat censorship fall peer peer rout event threat censorship correct time important block encrypt able sensor delay block know inside default case case large scale censorship mode peer peer communication peer peer network kind audit happen mechanisms kind move still achieve performance scalability yeah like okay understand correctly propagate block bloxroute first spread encrypted block decrypted function time decrypt work gateway encrypted block gateway connect peer node blockchain network okay source gateway encrypted block network hopefully propagate system gateway peer friend small piece data cache receive block block receive source confident block reach network decryption okay scale time block propagate quickly time privacy mean like block know distribute rest network network need receive software engineering daily transcript basically gateway choose random number node connect publicly know know gateway okay pretty sample block place reach reach sufficient number endpoint confident block fine decryption block decryption block relay network peer peer tiny tiny amount data work fine okay think understand degree unsolved theoretical problem look know academia long time know distribute system academia ruthless sure work real theoretical level proof experience academia still unanswered theoretical question feel like unanswered question implementation point theoretical question leave mean work fine mean theoretical question like implementation crystal clear still hiccups leave mean great development team basically come move idea idea talk like work dive implementation time mean hiccup deal well believe people tell idea simple work okay simple idea completely clear mind come implementation still bump leave right case fundamental come implement software sure audience know know white paper webpage shiny coin look complicate theory practice complicated right think theory simple help give hope tell firsthand work doubt software engineering daily transcript well worry sharding proof stake ethereum feel like simple teach tell listen explain grandmother minute problem understand think rule thumb positive like ethereum community leader problem wish succeed help like sharding sharding help move kind feel kind enablers coin well like performance tell listen luck strictly depend problem solve common exist fundamentally blockchain kind distributed consensus system happy work community success sponsor message failure unpredictable know system break know happen gremlin prepares outage gremlin resilience service chaos engineering technique pioneer netflix amazon prepare team disaster proactively test failure scenario blackhole slow network traffic dependency terminate process host show system react allow harden production incident checkout gremlin free demo gremlin sedaily gremlin sedaily free demo gremlin help prepare resilience service interview continue software engineering daily transcript token bloxroute token bloxroute need token network operation inexpensive effort okay example consider bitcoin amount data push network scale actually significant okay basically structure reason token network work blockchain transaction second user free give tiny tiny network help move forward okay altruistic think feel incentive align miner user bloxroute bloxroute leave table user miner value create manage scale blockchain push time expectedly miner time revenue tiny tiny amount time mystic tiny amount bloxroute large scale system tiny transaction money okay measure million billion dollar look like blockchains suck money cryptocurrency world crate blxr token blxr token current token ethereum absolutely utility security token work collect bloxroute come bloxroute company bloxroute actually operate network network call blxr reserve blxr reserve pile money consisting collect native cryptocurrencies blxr come exchange blxrs proportion percentage part example assume blxr reserve consist hypothetical million bitcoins assume million blxr mine case blxr come exchange bitcoin idea software engineering daily transcript pile grow overtime consist cryptocurrencies associate blockchains serve basically envision sort cryto index mean well currently know blockchains cryptocurrencies winner wish succeed bottom line likely valuable right blxr reserve indicator cryptocurrency successful believe blxr reserve dominantly fill cryptocurrency basically like maybe know succeed know personally know favorite favorite independently feel blxr success future winner cryptocurrency space sorry case know answer long expect best simpler accept bitcoin network charge small user correct exactly user native cryptocurrency right bitcoin user assume bloxroute support bitcoin user choose choose mining bitcoins blxr blxr hold value reason compete cryptocurrencies partner client right compete fulfill stuff principally bloxroute native cryptocurrency ethereum case ethereum bitcoin work need token fundamental scientific breakthrough blockchain distribution network introduce token like complete adjunct fundamental value proposition bloxroute software engineering daily transcript fundamental value proposition like scale blockchains okay expensive okay collect money collect realize successful well collect immense share actually broad cryto community piece operation basically blxr token completely transparent okay explain work basically lucrative deal opinion share success rest world sell equity quickly basically token story help time kind align incentive broad community people believe project like actually earn money case successful people token receive distribution base correct bloxroute directly pocket know investor like imagine revenue pocket speak fantastic sure sure sense model token vesting founder bloxroute basically company blxrs sell public round round token founder blxr reserve employee vest come like like know money basically basked performance milestone fulfill actually token basically milestone come operational network milestone number milestone number coin coin network milestone software engineering daily transcript proof concept prove actually mean reasonable responsible happen deliver promise deliver okay lockup period absolutely token first operational network first milestone correct actually first milestone show proof concept work wide area implementation system show actually scale bitcoin ethereum thousand transaction second milestone number like kind barrier actual implementation proof concept contrast venture capitalist traditional startup like traditional startup able liquidate share traction sure sure like quarter vest period year okay first kind milestone need reach trust sound easy like talk actually actually messy okay mean venture capitalist jeff bussgang board agree term mean yeah yeah norm venture capital previous norm kind lean like scrutinize project think look laboratory well fund project deserve deserve money invest mine share building stuff like bloxroute exist eventually able capture value software engineering daily transcript sure absolutely page sure argument absolutely argument high critically project defend basically think pretty threshold crypto world mean early understand people like money upfront mean heard story chance kind responsible rest world happen happen accountable right accountable mean hold employee actually performance base milestone like nice theory work show practice second like show work node network well alive wild show work second step third step okay happy well sure happy well onboard easy milestone time vesting period start milestone year stick company mean agree board happy think right right mean deliver talk totally mean love interview month like month show cryptocurrencies icos stuff bastardization model model beautiful work sense absolutely sense software engineering daily transcript black idea idea whole industry model sense yeah completely agree reason kind look venture capitalist select flybridge crypto font traditional kind font sense crypto company traditional networking company network like akamai understand like release point infrastructure right felt like sure access crypto world operate world like sideline time think need traditional venture capitalist traditionally love model like accountability mean anyways like kind company care choose love well sure talk future aleks blend conventionality ambition strangeness know eventually come cryptocurrency doubt interview month happy success thank interview enjoy think cover pretty well topic look forward talk bloxroute future well interview azure container service simplify deployment management operation kubernetes eliminate complicate planning deployment fully orchestrate software engineering daily transcript containerize application kubernetes quickly provision cluster time simplify monitoring cluster management auto upgrade build operation console avoid lock vendor resource continue work tool know helm move application kubernetes deployment integrate choice container registry include azure container registry quickly efficiently scale maximize resource utilization take application offline isolate application infrastructure failure transparently scale underlying infrastructure meet grow demand increase security reliability availability critical business workload azure learn azure container service azure service well receive free book brendan burn sedaily brendan burn creator kubernetes book distributed system design lesson learn building kubernetes book sedaily software engineering daily"

def sort_coo(coo_matrix):
    tuples = zip(coo_matrix.col, coo_matrix.data)
    return sorted(tuples, key=lambda x: (x[1], x[0]), reverse=True)

def extract_topn_from_vector(feature_names, sorted_items, topn=20):
    """get the feature names and tf-idf score of top n items"""

    #use only topn items from vector
    sorted_items = sorted_items[:topn]

    score_vals = []
    feature_vals = []

    # word index and corresponding tf-idf score
    for idx, score in sorted_items:

        #keep track of feature name and its corresponding score
        score_vals.append(round(score, 3))
        feature_vals.append(feature_names[idx])

    #create a tuples of feature,score
    #results = zip(feature_vals,score_vals)
    results= {}
    for idx in range(len(feature_vals)):
        results[feature_vals[idx]]=score_vals[idx]

    return results


# you only needs to do this once, this is a mapping of index to
feature_names=cv.get_feature_names()


#generate tf-idf for the given document
tf_idf_vector=tfidf_transformer.transform(cv.transform([test]))

#sort the tf-idf vectors by descending order of scores
sorted_items=sort_coo(tf_idf_vector.tocoo())

#extract only the top n; n here is 10
keywords=extract_topn_from_vector(feature_names,sorted_items,20)

# now print the results
print("\n=====Doc=====")
# print(doc)
print("\n===Keywords===")
for k in keywords:
    print(k,keywords[k])
