import pandas as pd
import pickle
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, TfidfTransformer
from nltk.corpus import stopwords

with open('./utils/stopwords.txt') as f:
  additional_stopwords = f.read().splitlines()

def save_obj(obj, name ):
    with open('./pickle-files/' + name + '.pkl', 'wb') as f:
        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)

custom_stopwords = set(stopwords.words('english') + list(additional_stopwords))

articles = pd.read_pickle('./pickle-files/preprocessed_docs.pkl')

print('length of articles', len(articles))

df_articles = pd.DataFrame(articles)

# print(df_articles['full_text'][1])
# print(df_articles.dtypes)

docs = df_articles['full_text'].tolist()

cv=CountVectorizer(max_df=0.85,stop_words=stopwords.words('english'))
word_count_vector=cv.fit_transform(docs)

tfidf_transformer=TfidfTransformer(smooth_idf=True,use_idf=True)
tfidf_transformer.fit(word_count_vector)

save_obj(word_count_vector, 'word_count_vector')

print(list(cv.vocabulary_.keys())[:20])

test = "episode mapillary company process high volume image develop labeled model physical world mapillary apis allow developer build application aware sign building street tree physical object real world space potential case mapillary numerous range self drive augmented reality build model real world expose apis model real world perfect representation reality year change tool advance able build access physical world mapillary possible combination modern development high quality smart phone camera allow user crowdsource image world cloud compute allows cheap workload processing computer vision technique allow image stitch representation deep learning architecture improve classification segmentation object image peter kontschieder head research mapillary join show talk technology research enable mapillary build futuristic business access physical world look sponsor interested reach developer softwareengineeringdaily sponsor find message love hear engineer work company market developer hire developer tell marketing department recruiting department softwareengineeringdaily sponsor help thanks listen show peter kontschieder head research mapillary welcome jeff great look forward talk mapillary image representation computer vision think start basic computer vision gradually application computer vision difference research application start fundamental take image image represent numerically matrix pixel mean dimension maybe image mean green blue value define color pixel space numerical representation image interesting image give overview take image mathematical representation matrix extract meaning image actually discuss computer vision especially image base computer vision consider image image hold bunch number pixel color channel combination know represent color pixel structured align data grid refer image human person machine regular grit data arrange come computer vision find identify pattern image correspond human identify image take look image person clear notion pixel random shuffled form object consistent manner delineation outline object naturally absorb look think machine need start build representation machine actually exploit structure data form computation input order identify object detect segment require computational know capacity actually usable practice business application self driving yeah give short answer abstract normal regular input image tell number object interested object locate think fill number lecture university abbreviate quickly cover basic concept example image represent matrix pixel nice look order analyze image call convolution matrix pixel explain convolution refer current stream technology algorithm computer vision deep learn deep learning actually extraction semantic level input image identify image abstraction layer layer example convolution convolution local operator local operator locally perform multiplication addition depend convolutional kernel kernel find specific pattern image start react local image think maybe think circular shape pattern convolutional kernel similar structure find matching pattern input image fire area term response area image example specific convolution convolutional kernel apply image find specific fire maybe body tail gradually gradual process start look narrow local feature call layer explain whole mean individual piece assemble progress deep layer convolutional neural network take matrix matrix zero able identify look upper right hand corner matrix bunch agree look happen right hand corner convolution system find edge find circle similar deep complex computer basic analysis bunch upper right hand corner computer collection pixel space look circle look start build high level abstraction associate matrix pixel able identify convolutional kernel parameter eventually learn process train deep neural network convolutional neural networking simple example actually write task optimization problem optimization problem solve find individual convolutional operator look order best possibly explain solve optimization problem respond best possible solve problem find convolutional kernel look possible find exactly pattern best data learn train data learning problem right yeah collection image image label computer identify section picture number term spend basic computer vision podcasts cover term define latent space explain latent space refer latent space term convolutional network deep neural network start discussion image matrix input output label image show order translation original input data output statement largely undefined easily understand input image output come hidden layer hidden latent state model operate mean undergo number transformation input output state latent define advance right guess network build deep deep well define operator edge detection layer circle detection layer high high level territory computer take edge circle layer abstract latent space latent space cover feature hard human nonetheless base pattern latent surface level understanding collection image accurate look refer hidden layer hide state people start visualize deep neural network understand hood early layer find response edge sharp transition level feature call deeply network layer find agglomerate local start assemble response look actual object find think cover basic people excited deep learning idea take image look image earth explain computer image music piece music highly dimensional abstract concept music piece define break mathematical term structure computer understand level build rich abstraction define maybe word label computer computer learn mathematical space latent space compose concept exciting deep learning least absolutely right maybe fill hole happen start computer vision space deep learning narrow artificial intelligence method today beginning people work model method explicit solve computer vision task people object term shape find shape model understand well explain object interested recognize deep learning sudden need first curated collect data example large data source data source annotate talk human annotation person annotate data important part large mass annotated datasets help tackle problem perspective perspective model define input output simple example perform image classification care fine detail free input image single label attach sorry result model second part need computation need order train model exciting part definitely define problem term mathematics start solve underlie optimization problem train long data explain problem model eventually find absorb training data come show unseen image model still give correct answer model predict data continue evolution architecture convolutional neural network architecture alexnet vggnet googlenet know history give brief history technology improve research evolution yeah mean cnns convolutional neural network actually mean people inaudible found father geoff hinton work fairly long actually cnns come beginning start fairly shallow network small capacity layer parameter parameterize model number neuron layer consider small begin large jump term point alexnet alexnet remember well paper present nipsp large important actually large important conference field think layer large number parameter name actual number layer increase capacity think insane deep jump jump sudden network later come collaborator find virtu residual network sudden layer large number variation come sudden extremely deep long specific task image classification capacity term layer model mean come complication properly train model data compute power actually wait model properly train start perform deep yeah still trend parameter data source large data source still increase performance course come cost cost computational budget spend well discussion mapillary define application deep neural network computer vision fairly still move still efficient accurate tailwind mapillary answer question mapillary sense technology mapillary build year piece context frame business explain mapillary mapillary platform collaboratively collect streetlevel data take contributor type camera model world large platform operate order build joint representation world give detail build joint representation world high level large build block leave backend think greatly cover discussion peter neubauer computer vision pillars build modeling object recognition semantic segmentation maybe focus semantic segmentation discuss image classification give image machine tell likely class object category show semantic segmentation task task give input image assign categorical semantic label single pixel image mean example interested large number street level asset object point interest call assume dash dash drive traffic light cover large field view dash maybe crosswalk traffic light large number object image machine semantic segmentation image recognize pixel object interested mapillary number service start privacy protection automatically identify area human face blur license plate blur well extract actually identify traffic light find pixel image form traffic light second pillar mention modeling find actually position traffic light model world freebie model world meantime object category able recognize start pull object individually position data mapillary explain accurately tell wrong people contribute image cellphone people take picture smartphones crowdsourcing image world large influx image people take phone take picture phone automatically geotag latitude longitude world perfect degree accuracy imagine people take random picture world geotagged maybe derive angle take picture take image synthesize construct scene focus take image synthesize representation world application mention process look image think look image infer additional representation look image object segmentation area computer vision rapidly evolve show object segmentation define prominent shape image square object draw bounding segment maybe processing define object object segmentation object segment classification image maybe scene image street object segmentation across object scene sign prius well computer object object object pass bound classification algorithm bound bounding computer sign know sign image start work segmentation derive scene build model literally exist world model explore communicate computer sign world ascribe later maybe ascribe mean sign computer eventually understand model world object happen sign sign typically tell people drive tell wrong representation mapillary basic building block name first model sequence image capture download capturing software signal take image upload server call structure motion structure motion allow extract threedimensional structure dimensional model base sequence least multiple twodimensional image find correspondence image identify point allow infer model world important allow redundant capture example drive second part take detour semantic segmentation directly input image semantic segmentation explain label assign semantic label single pixel image large number pixel small tool square example mention locally find consistent segmentation consistent object image interpret human perspective bunch pixel belonging example traffic light find group pixel model actually come data know correspondence position pixel model extract semantic interpretation semantic segmentation algorithm obviously grouping step involve think refer detection mechanism platform actually cluster algorithm cluster pixel contribute object traffic light surveillance camera find help position whole pipeline give sequence image extract relevant street level asset data point interest help application self drive maybe find place problem mention structure motion explain detail structure motion apply structure motion infer threedimensional structure dimensional image image take subsequent walk path take image subsequently find similar image right actually shift motion actually able identify corresponding part feature image corner prominent point find feature detector able infer structure base correspondence find important mapillary understanding mapillary today image data come people smartphone taking static image camera relevant mapillary need find model right operate model identify corresponds model infer real world build true representation scaled model real world position position object extract semantic perspective able perfectly segment image able assign latitude longitude term position identify object half wait right optimal image world right image show transition location spot world find path image model part structure motion part work perfectly allow extract coherent consistent model image object recognition task include semantic segmentation come soon recognize single instance semantic class help extract street level asset care customer care automated right image come people smartphones take picture people smartphones take video surveillance camera gather video drone gather video self driving module record video solve structure motion problem take advantage kind record image data improve mapillary view world right obviously quality data largely depend camera type camera camera smartphones today extremely course still room improvement depend image quality talk type distortion perfect world encounter data camera model find contribute accuracy quality result example back structure motion model problem feature identify match image reconstruction part solve find camera pose point camera find largely depend well data match eventually build invest brain power come model deal imperfect condition accept kind source imagery find course difference super expensive capturing rank capture image high quality oppose take generation smartphone maybe issue shutter camera type problem align challenge address work well exciting company least external perspective guess inside problem face point mapillary vision richly define vision world people query build application build self drive build drone build kind structure label model world excite barrier implement full dream product problem incremental tell engineering problem engineering problem data pipeline look storage space memory batch model correctly train model correctly cost control cloud computing infrastructure budget allocate money actually afford computer vision processing real scientific bottleneck worried feel forefront exciting question implementation think interesting question team work scientific forefront definitely example problem spend work recognition problem general semantic segmentation back couple year model start work number benchmark datasets scientist start develop model implement fail couple lucky persistent point start work ideally start work well take model publicly benchmark significant margin course additional scientific value efficient computationally efficient term runtime term final output metric care parameter room improvement second part question engineering perspective think large aspect engineering especially scale budget actually afford scale system handle amount data quote large amount data work fantastic engineering piece mainly back team computer vision team solve example privilege work research direction least first consideration bring large scale explore field inside exist problem course research perspective come application perspective whole field evolves company university research contribute knowledge great benefit think exciting part happy lucky right field kubernetes difficult container networking storage disaster recovery issue figure alone mesosphere kubernetes service single click kubernetes deployment simple management security feature high availability kubernetes deployment easy find mesosphere kubernetes service softwareengineeringdaily mesosphere mesosphere kubernetes service heals detect problem state cluster worry cluster easy install monitoring logging tool kubernetes cluster click install additional tooling prometheus linkerd jenkins service service catalog mesosphere build multi cloud hybrid cloud edge compute easy find mesosphere kubernetes service help easily deploy kubernetes check softwareengineeringdaily mesosphere support well reason mesosphere founder hindman first people interview software engineering back host software engineering radio generous explanation distribute system concept back year applied distributed system material little scant marketplace hard find distribute system production people evangelize talk obviously build apache mesos happy mesosphere sponsor check mesosphere support softwareengineeringdaily mesosphere interview continue talk company research division mapillary research division lead research division research engineering implementation begin division labor discovery research department implementation department yeah nice startup environment short right still people work company especially engineering research side find actually turn work benchmark data mention include example mapillary vista data appreciate definitely attention product implementation scale orient team take research bring production soon possible nice find startup work super super smooth opinion find proud semantic segmentation development advancement help couple public benchmark year technology production think couple month pretty quick research department back forth industry academic research development mean long story technology responsibility academy responsibility industry responsibility relationship push pull value cross cultural area nips place people cross pollinate cross pollination academic world research world implementation world broadly people willing share willing share open close proprietary secret sauce give framing culture today think shift look back year think consider purely academic research maybe arrive company research level example look large silicon valley company mean research labs actually publish disseminate result publicly form technical report paper term friendly license commercial setting think reason fold large number people maybe stay academia scientific start develop experiment fail succeed undergo phase researcher point find write submit conference hopefully accept paper people field grow demand application point view mean largely deep learning actually start work interesting commercial perspective high demand sudden people skill attract people actually prefer academic setting offer great workplace term still work problem outcome actually directly translate product commercialization addition lack resource compute infrastructure data ingredient think contribute whole community open term share term money people vast quantity people industry purely academic world happen academic nonpartisan force people friedman start podcast recently actually artificial intelligence recommend podcast check nonpartisan enlighten start podcast beginning podcast still academic computer science move industry industry unlimited compute money product academia politicize remove politics politics pull virtue specific company immune academia yeah maybe field rule need need understand understand participate area maybe come back question think still large number open unsolved problem deep learning talk still consider supervise setting right data annotate machine find optimal solution give data train model spit data match well ideally learn training data talk supervise learning narrow space machine learning think data label simply feasible label data world mean virtually large area receive scientific treatment people come smarter model deal mass data still work right know couple macroquestions read book recently superpower book implementation artificial intelligence technology china chinese startup speed deployment faster efficient quality bring model market place west part rich datasets variety reason difference nationality across research implementation computer vision specifically china stand computer vision machine learning circumstantial think general answer personal observation attendance conference cvpr grow large pace think large crowd maybe asian country think large cosmos startup start build number young company come example china show outstanding result benchmark datasets contributor think matter engineering important curiosity drive find find design model train course large financial backup company afford large cluster farm think multifaceted answer case sure find outstanding researcher engineer world definitely true strong rise especially people china company china yeah look forward hear area computer science research world cross pollination sharing positive share computer vision opportunity unimaginable value gain value creation zero china computer vision take away reap reward compute computer vision value creation exist unimaginably large optimistic maybe geopolitical cross pollination least least scientist degree think expert hope learn hopefully interview people future listen suggestion people interview last question little optimistic spamming internet fake image fake video fake video talk recently mechanism detect deep fake deep fake obviously high quality naive solution improve deep fake detection rapidly fake video trump blink accurate human detect fake trump video fake blink rate detection interest enter world spam anti spam front real video thought area concern concerned think interesting question scientific perspective work reveal identify fake video video artificially generate successful think paper come generate fake material sure least paper identify fake video actually definitely completely story sure manipulate data mean reason form great benefit society society general aware least think twice start take video take grant education process think need start happen maybe start learn possible technological perspective aware take deal right well thanks humor totally unrelated mapillary real pleasure learn computer vision talk sure material future know dive mapillary take bunch thanks come show peter great talk thank invitation continuous delivery free developer ship independently gocd open source continuous delivery tool partner gocd deliver quick modern continuous delivery today visualize workflow able status build across pipeline visualization help step back picture continuous delivery process continuous delivery tool help visualize workflow find show workflow visualization hire unfamiliar continuous delivery useful explain release process work find continuous delivery check gocd sedaily gocd sponsor year show team gocd great team proud support start continuous delivery check gocd sedaily"

def sort_coo(coo_matrix):
    tuples = zip(coo_matrix.col, coo_matrix.data)
    return sorted(tuples, key=lambda x: (x[1], x[0]), reverse=True)

def extract_topn_from_vector(feature_names, sorted_items, topn=20):
    """get the feature names and tf-idf score of top n items"""

    #use only topn items from vector
    sorted_items = sorted_items[:topn]

    score_vals = []
    feature_vals = []

    # word index and corresponding tf-idf score
    for idx, score in sorted_items:

        #keep track of feature name and its corresponding score
        score_vals.append(round(score, 3))
        feature_vals.append(feature_names[idx])

    #create a tuples of feature,score
    #results = zip(feature_vals,score_vals)
    results= {}
    for idx in range(len(feature_vals)):
        results[feature_vals[idx]]=score_vals[idx]

    return results


# you only needs to do this once, this is a mapping of index to
feature_names=cv.get_feature_names()


#generate tf-idf for the given document
tf_idf_vector=tfidf_transformer.transform(cv.transform([test]))

#sort the tf-idf vectors by descending order of scores
sorted_items=sort_coo(tf_idf_vector.tocoo())

#extract only the top n; n here is 10
keywords=extract_topn_from_vector(feature_names,sorted_items,20)

# now print the results
print("\n=====Doc=====")
# print(doc)
print("\n===Keywords===")
for k in keywords:
    print(k,keywords[k])
